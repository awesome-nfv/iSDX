#!/usr/bin/perl -w

use strict;
use Getopt::Long;
use File::Basename;
use String::CRC32;

my $vlan = 1;

my $host = 'localhost';
my $port = '8080';
my $dpid = 1;
my $priority = 0;
my($port_in,$eth_type_arp,$eth_src_in,$eth_dst_in);
my($tcp_src,$tcp_dst);
my($eth_src_out,$eth_dst_out) = ('','');
my $show_msg;
my $skip_intf_group;
my $rc;

GetOptions("dpid=i" => \$dpid,
	   "priority=i" => \$priority,

	   "port_in=i" => \$port_in,
	   "eth_type_arp" => \$eth_type_arp,
	   "eth_src_in=s" => \$eth_src_in,
	   "eth_dst_in=s" => \$eth_dst_in,
	   "tcp_src=i" => \$tcp_src,
	   "tcp_dst=i" => \$tcp_dst,

	   "eth_src_out=s" => \$eth_src_out,
	   "eth_dst_out=s" => \$eth_dst_out,

	   "show_msg" => \$show_msg,
	   "skip_intf_group" => \$skip_intf_group
    ) or die("Bad option argument");

my $port_out = shift or usage();

sub usage {
    my $cmd = basename($0);
    print <<END_USAGE;
usage: $cmd <options..> output_port
    Create a new flow and create the groups it uses as needed
    (unless 'skip_intf_group' is specified).

    General OpenFlow Options:
      --dpid <n>
      --priority <n>
    Matching Options:
      --port_in <n>
      --eth_type_arp
      --eth_src_in <xx:xx:xx:xx:xx:xx[/mm:mm:mm:mm:mm:mm]>
      --eth_dst_in <xx:xx:xx:xx:xx:xx[/mm:mm:mm:mm:mm:mm]>
      --tcp_src <port_no>
      --tcp_dst <port_no>
    Action Options:
      --eth_src_out <xx:xx:xx:xx:xx:xx>
      --eth_dst_out <xx:xx:xx:xx:xx:xx>
    Other Options:
      --show_msg
      --skip_intf_group
END_USAGE
    exit 1
}

#print "gid is $group_id\n";

my $port_in_str = $port_in ? "'in_port': $port_in," : '';
my $eth_type_str = $eth_type_arp ? "'eth_type': 2054," : '';
my $eth_src_in_str = $eth_src_in ? "'eth_src': \"$eth_src_in\"," : '';
my $eth_dst_in_str = $eth_dst_in ? "'eth_dst': \"$eth_dst_in\"," : '';
my $tcp_src_str = $tcp_src ? "'tcp_src': $tcp_src," : '';
my $tcp_dst_str = $tcp_dst ? "'tcp_dst': $tcp_dst," : '';
my $ip_proto_str = ($tcp_src || $tcp_dst) ? "'ip_proto': 6," : '';

mac_usage() if ($eth_src_in && $eth_src_in !~ /^(..)(:..){5}(\/(..)(:..){5})?$/);
mac_usage() if ($eth_dst_in && $eth_dst_in !~ /^(..)(:..){5}(\/(..)(:..){5})?$/);
mac_usage() if ($eth_src_out && $eth_src_out !~ /^(..)(:..){5}(\/(..)(:..){5})?$/);
mac_usage() if ($eth_dst_out && $eth_dst_out !~ /^(..)(:..){5}(\/(..)(:..){5})?$/);

# create L2 Interface Group (may already exist)
my $intf_group = ($vlan << 16) + $port_out;
my $group_id = $intf_group;

my $igroup_msg = <<END_IGROUP;
{
    'dpid': $dpid,
    'type': 'INDIRECT',
    'group_id': $group_id,
    'buckets':[
        {
            'actions': [
                {
                    'type': 'OUTPUT',
                    'port': $port_out
                },
                {
                    'type': 'POP_VLAN'
                }
            ]
        }
    ]
}
END_IGROUP

if (!$skip_intf_group) {
    print "$igroup_msg\n" if $show_msg;
    $rc = system('curl', '-f', '-X', 'POST', '-d', "$igroup_msg", "http://$host:$port/stats/groupentry/add");
    print "Create interface group request failed\n" if $rc;
}

my($eth_src_out_str,$eth_dst_out_str);
if ($eth_src_out || $eth_dst_out) {
    # need to use L2 Rewrite Group -- create one on the fly
    # (if it exists already, no big deal)
    $group_id = ((crc32($eth_src_out . $eth_dst_out) >> 8) + $port_out) | 0x10000000;
    $eth_src_out_str = $eth_src_out ? 
	",{'type':'SET_FIELD', 'field':'eth_src', 'value':\"$eth_src_out\"}" : '';
    $eth_dst_out_str = $eth_dst_out ? 
	",{'type':'SET_FIELD', 'field':'eth_dst', 'value':\"$eth_dst_out\"}" : '';

    my $rgroup_msg = <<END_RGROUP;
{
    'dpid': $dpid,
    'type': 'INDIRECT',
    'group_id': $group_id,
    'buckets':[
        {
            'actions': [
                {
                    'type': 'GROUP',
                    'group_id': $intf_group
                }
		$eth_src_out_str
		$eth_dst_out_str
            ]
        }
    ]
}
END_RGROUP

    print "$rgroup_msg\n" if $show_msg;

    $rc = system('curl', '-f', '-X', 'POST', '-d', "$rgroup_msg", "http://$host:$port/stats/groupentry/add");
    print "Create rewrite group request failed\n" if $rc;
}

my $flow_msg = <<ENDMSG;
{
    'dpid': $dpid,
    'table_id': 60,
    'priority': $priority,
    'match':{
	$port_in_str
	$eth_type_str
	$eth_src_in_str
	$eth_dst_in_str
	$tcp_src_str
	$tcp_dst_str
	$ip_proto_str
        'dl_vlan': 1
    },
    'actions':[
        {
            'type':'GROUP',
            'group_id': $group_id
        }
    ]
}
ENDMSG

print "$flow_msg\n" if $show_msg;

$rc = system('curl', '-f', '-X', 'POST', '-d', "$flow_msg", "http://$host:$port/stats/flowentry/add");

print "Create flow request failed\n" if $rc;


sub mac_usage {
    print "MAC format bad.  Should be e.g., aa:bb:cc:dd:ee:ff or aa:bb:cc:dd:ee:ff/ff:00:00:00:00:ff\n";
    exit 1
}
