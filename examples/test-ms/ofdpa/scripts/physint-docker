#!/bin/bash
# Copyright (C) 2014 Nicira, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -x

# Check for programs we'll need.
search_path () {
    save_IFS=$IFS
    IFS=:
    for dir in $PATH; do
        IFS=$save_IFS
        if test -x "$dir/$1"; then
            return 0
        fi
    done
    IFS=$save_IFS
    echo >&2 "$0: $1 not found in \$PATH, please install and try again"
    exit 1
}

ovs_vsctl () {
    ovs-vsctl --timeout=60 "$@"
}

create_netns_link () {
    mkdir -p /var/run/netns
    if [ ! -e /var/run/netns/"$PID" ]; then
        ln -s /proc/"$PID"/ns/net /var/run/netns/"$PID"
        trap 'delete_netns_link' 0
        for signal in 1 2 3 13 14 15; do
            trap 'delete_netns_link; trap - $signal; kill -$signal $$' $signal
        done
    fi
}

delete_netns_link () {
    rm -f /var/run/netns/"$PID"
}

add_port () {

    DOCKINTERFACE="$1"; shift
    PHYSINTERFACE="$1"; shift
    CONTAINER="$1"; shift
    ADDRESS="$1"; shift
    GATEWAY="$1"; shift
    MACADDR="$1"; shift

    if [ "$CONTAINER" = "" ]; then
        usage
        exit 1
    fi

    if PID=`docker inspect -f '{{.State.Pid}}' "$CONTAINER"`; then :; else
        echo >&2 "$UTIL: Failed to get the PID of the container"
        exit 1
    fi

    create_netns_link

    INTERFACE=$DOCKINTERFACE

    # Create a veth pair.
    if [ "$INTERFACE" = "eth0" ]; then
	ID=`echo C$CONTAINER | sed 's/-//g'`
    elif [ "$INTERFACE" = "eth1" ]; then
	ID=`echo D$CONTAINER | sed 's/-//g'`
    else
	ID=`uuidgen | sed 's/-//g'`
    fi
    PORTNAME="${ID:0:13}"

    # Move "${PHYSINTERFACE}" inside the container and changes its name.
    ip link set "${PHYSINTERFACE}" netns "$PID" name "$DOCKINTERFACE"
    ip netns exec "$PID" ip link set "$INTERFACE" up

    if [ -n "$MACADDR" ]; then
        ip netns exec "$PID" ip link set dev "$INTERFACE" address "$MACADDR"
    fi

    if [ -n "$ADDRESS" ]; then
        ip netns exec "$PID" ip addr add "$ADDRESS" dev "$INTERFACE"
    fi

    if [ -n "$GATEWAY" ]; then
        ip netns exec "$PID" ip route add default via "$GATEWAY"
    fi
}

usage() {
    cat << EOF
${UTIL}: Performs integration of Open vSwitch with Docker.
usage: ${UTIL} COMMAND

Commands:
  add-port DOCKERINTERFACE PHYSINTERFACE CONTAINER [ADDRESS [GATEWAY [MACADDR]]]
                    Adds PHYSINTERFACE inside CONTAINER as interface DOCKERINTERFACE
                    Optionally, sets ADDRESS on
                    INTERFACE. ADDRESS can include a '/' to represent network
                    prefix length. Along with ADDRESS, optionally set the
                    default gateway for the container and mac address.
Options:
  -h, --help        display this help message.
EOF
}

UTIL=$(basename $0)
search_path docker

if (ip netns) > /dev/null 2>&1; then :; else
    echo >&2 "$UTIL: ip utility not found (or it does not support netns),"\
             "cannot proceed"
    exit 1
fi

if [ $# -eq 0 ]; then
    usage
    exit 0
fi

case $1 in
    "add-port")
        shift
        add_port "$@"
        exit 0
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    *)
        echo >&2 "$UTIL: unknown command \"$1\" (use --help for help)"
        exit 1
        ;;
esac
